#!/usr/bin/python
# invocation: ./FxA-client 7000 127.0.0.1 5000
import sys
import re
import threading
from time import sleep
import RxPSocket
import traceback

argv = sys.argv
if len(argv) < 4:
    print "Invalid invocation. Include listening port number, NetEmu IP, and NetEmu port number"
    sys.exit()

command, listening_port, netemu_ip, netemu_port = argv

try:
    listening_port = int(listening_port)
except ValueError:
    print "Invalid invocation. Listening port number must be an integer"
    sys.exit()

m = re.search('^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$', netemu_ip)
if m is None:
    print "Invalid invocation. Netemu IP must be IPv4 address"
    sys.exit()

try:
    netemu_port = int(netemu_port)
except ValueError:
    print "Invalid invocation. Netemu port number must be an integer"
    sys.exit()

class Client():
    def __init__(self, host, port):
        self.host = host
        self.port = port
        self.socket = RxPSocket.RxPSocket()
        self.is_active = True
        print "Client for {}:{} ready".format(host, port)

    def connect(self):
        self.socket.connect(self.host, self.port)

    def hello(self):
        self.send("hello")
        self.recv()

    def ls(self):
        self.send("ls")
        self.recv()

    def get(self, filename):
        message = "get:{}".format(filename)
        self.send(message)
        self.recv()

    def post(self, filename):
        print "posting {}".format(filename)

    def window(self, window_size):
        self.send("window:{}".format(window_size))
        self.recv()
    
    def disconnect(self):
        self.socket.close()

    def exit(self):
        self.is_active = False

    def send(self, message):
        self.socket.send(message + "\n")

    def recv(self):
        command, data = self.raw_recv()
        fully_qualified_command = "recv_{}".format(command)
        if hasattr(self, fully_qualified_command):
            function = getattr(self, fully_qualified_command)
            function(data)
        else:
            print "Cannot handle data format: {}".format(command)

    def recv_error(self, error):
        return self.recv_message("!!!ERROR!!! " + error)

    def recv_message(self, message):
        print message

    def recv_file(self, f):
        filename, data = f.split(":", 1)
        filename = str(filename)
        with open(filename, 'w') as file_handle:
            file_handle.write(data)

    def raw_recv(self):
        data = self.socket.recv(1024)
        command, arg_length, data = data.split(":", 2)
        command = str(command)
        arg_length = int(arg_length)
        while arg_length - len(data) > 0:
            data += self.socket.recv(arg_length - len(data))
        return (str(command), data)


client = Client('127.0.0.1', listening_port)

while client.is_active:
    action = raw_input(">> ")
    parts = action.split(" ")
    command, args = parts[0], parts[1:]
    if len(command) == 0:
        continue
    elif not hasattr(client, command):
        print "Invalid command"
    else:
        try:
            function = getattr(client, command)
            function(*args)
        except Exception as e:
            print e
            print traceback.format_exc()

