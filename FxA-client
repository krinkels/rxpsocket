#!/usr/bin/python
# invocation: ./FxA-client 7000 127.0.0.1 5000
import sys
import re
import threading
from time import sleep
import RxPSocket
import traceback

argv = sys.argv
if len(argv) < 4:
    print "Invalid invocation. Include listening port number, NetEmu IP, and NetEmu port number"
    sys.exit()

command, listening_port, netemu_ip, netemu_port = argv

try:
    listening_port = int(listening_port)
except ValueError:
    print "Invalid invocation. Listening port number must be an integer"
    sys.exit()

m = re.search('^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$', netemu_ip)
if m is None:
    print "Invalid invocation. Netemu IP must be IPv4 address"
    sys.exit()

try:
    netemu_port = int(netemu_port)
except ValueError:
    print "Invalid invocation. Netemu port number must be an integer"
    sys.exit()

class Client():
    def __init__(self, host, port):
        self.host = host
        self.port = port
        self.socket = RxPSocket.RxPSocket()
        self.is_active = True
        print "Client for {}:{} ready".format(host, port)

    def connect(self):
        self.socket.connect(self.host, self.port)

    def hello(self):
        self.socket.send("hello")

    def get(self, filename):
        print "getting {}".format(filename)

    def post(self, filename):
        print "posting {}".format(filename)

    def window(self, window_size):
        window_size = int(window_size)
        print "not yet implemented"
        return
    
    def disconnect(self):
        self.socket.close()

    def exit(self):
        self.is_active = False

client = Client('127.0.0.1', listening_port)

while client.is_active:
    action = raw_input(">> ")
    parts = action.split(" ")
    command, args = parts[0], parts[1:]
    if not hasattr(client, command):
        print "Invalid command"
    try:
        function = getattr(client, command)
        function(*args)
    except Exception as e:
        print e
        print traceback.format_exc()

