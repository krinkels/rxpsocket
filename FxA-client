#!/usr/bin/python
# invocation: ./FxA-client 7000 127.0.0.1 5000
import sys
import threading
from time import sleep
import RxPSocket
import traceback
from os import listdir
from os.path import isfile, join
import FxA

command, listening_port, netemu_ip, netemu_port = FxA.get_arguments()

class Client():
    def __init__(self, host, port):
        self.host = host
        self.port = port
        self.window_size = 1
        self.socket = RxPSocket.RxPSocket()
        self.is_active = True
        print "Client for {}:{} ready".format(host, port)

    def connect(self):
        self.socket.window_size = self.window_size
        self.socket.connect(self.host, self.port)

    def hello(self):
        self.send("hello")
        self.recv()

    def ls(self):
        self.send("ls")
        self.recv()

    def get(self, filename):
        self.send("get", filename)
        self.recv()

    def post(self, filename):
        filename = join('.', str(filename))
        if not isfile(filename):
            print "no such file"
            return
        contents = ""
        with open(filename) as file_handle:
            contents = file_handle.read()
        contents = "{}:{}".format(filename, contents)
        self.send("file", contents)
        self.recv()

    def window(self, window_size):
        try:
            window_size = int(window_size)
            if window_size < 1 or window_size > 16:
                print "Invalid window size"
                return
            self.window_size = window_size
        except ValueError:
            print "Invalid window size"
    
    def disconnect(self):
        self.socket.close()

    def exit(self):
        self.is_active = False

    def send(self, command, data=''):
        self.socket.send(FxA.make_message(command, data))

    def recv(self):
        command, data = self.raw_recv()
        fully_qualified_command = "recv_{}".format(command)
        if hasattr(self, fully_qualified_command):
            function = getattr(self, fully_qualified_command)
            function(data)
        else:
            print "Cannot handle data format: {}".format(command)

    def recv_error(self, error):
        return self.recv_message("!!!ERROR!!! " + error)

    def recv_message(self, message):
        print message

    def recv_file(self, f):
        filename, data = f.split(":", 1)
        filename = str(filename)
        with open(filename, 'w') as file_handle:
            file_handle.write(data)

    def raw_recv(self):
        command, data = FxA.read_message(self.socket)
        return (command, data)


client = Client('127.0.0.1', listening_port)

while client.is_active:
    action = raw_input("CLIENT>> ")
    parts = action.split(" ")
    command, args = parts[0], parts[1:]
    if len(command) == 0:
        continue
    elif not hasattr(client, command):
        print "Invalid command"
    else:
        try:
            function = getattr(client, command)
            function(*args)
        except Exception as e:
            print e
            print traceback.format_exc()

