#!/usr/bin/python
# invocation: ./FxA-server 7001 127.0.0.1 5000
import sys
import threading
from time import sleep
import RxPSocket
import socket
from os import listdir
from os.path import isfile, join
import FxA

command, listening_port, netemu_ip, netemu_port = FxA.get_arguments()

class Handler():
    def __init__(self, conn, addr, server):
        self.conn = conn
        self.addr = addr
        self.server = server
        self.is_active = True
        print "connected to {}".format(addr)

    def handle(self):
        while self.is_active:
            command, data = self.recv()
            if command is None:
                self.is_active = False
                break
            if hasattr(self, command):
                args = []
                if data:
                    args.append(data)
                function = getattr(self, command)
                function(*args)
            else:
                self.send("error", "Invalid command")

    def hello(self):
        self.send("message", "hello")

    def ls(self):
        filenames = [filename for filename in listdir('.') if isfile(join('.', filename))]
        self.send("message", "\n".join(filenames))

    def get(self, filename):
        filename = join('.', str(filename))
        if not isfile(filename):
            return self.send("error", "no such file")
        contents = ""
        with open(filename) as file_handle:
            contents = file_handle.read()
        contents = "{}:{}".format(filename, contents)
        self.send("file", contents)

    def file(self, data):
        filename, data = data.split(":", 1)
        filename = str(filename)
        with open(filename, 'w') as file_handle:
            file_handle.write(data)
        self.send("message", "file saved remotely")

    def window(self, window_size):
        try:
            window_size = int(window_size)
            self.server.setWindowSize(window_size)
        except ValueError:
            self.send("error", "Invalid window size")

    def terminate(self):
        self.server.terminate()

    def close(self):
        self.conn.close()

    def send(self, message_type, message):
        self.conn.send(FxA.make_message(message_type, message))

    def recv(self):
        command, data = FxA.read_message(self.conn)
        return command, data

class Server(threading.Thread):
    def __init__(self, host, port):
        threading.Thread.__init__(self)
        self.socket = RxPSocket.RxPSocket()
        self.socket.bind(host, listening_port)
        self.socket.listen(5)
        self.signal = True
        print "Server listening on {}:{}".format(host, listening_port)

    def run(self):
        while self.signal:
            conn, addr = self.socket.accept()
            handler = Handler(conn, addr, self)
            handler.handle()
            handler.close()
        self.socket.close()

    def setWindowSize(self, window_size):
        return

    def terminate(self):
        self.signal = False


server = Server(socket.gethostname(), listening_port)
server.daemon = True
server.start()

while server.signal:
    action = raw_input("SERVER>> ")
    parts = action.split(" ")
    command, args = parts[0], parts[1:]
    try:
        function = getattr(server, command)
        function(*args)
    except AttributeError:
        print "Invalid command"
    except Exception as e:
        print e
