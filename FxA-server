#!/usr/bin/python
# invocation: ./FxA-server 7001 127.0.0.1 5000
import sys
import re
import threading
from time import sleep
import RxPSocket
import socket
from os import listdir
from os.path import isfile, join

argv = sys.argv
if len(argv) < 4:
    print "Invalid invocation. Include listening port number, NetEmu IP, and NetEmu port number"
    sys.exit()

command, listening_port, netemu_ip, netemu_port = argv

try:
    listening_port = int(listening_port)
except ValueError:
    print "Invalid invocation. Listening port number must be an integer"
    sys.exit()

m = re.search('^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$', netemu_ip)
if m is None:
    print "Invalid invocation. Netemu IP must be IPv4 address"
    sys.exit()

try:
    netemu_port = int(netemu_port)
except ValueError:
    print "Invalid invocation. Netemu port number must be an integer"
    sys.exit()

class Handler():
    def __init__(self, conn, addr, server):
        self.conn = conn
        self.addr = addr
        self.server = server
        self.is_active = True
        print "connected to {}".format(addr)

    def handle(self):
        while self.is_active:
            data = self.recv()
            self.handle_data(data)

    def handle_data(self, data):
        parts = data.split(":", 1)
        command = str(parts[0])
        if hasattr(self, command):
            arg = parts[1] if len(parts) > 1 else ''
            args = []
            if arg:
                args.append(arg)
            function = getattr(self, command)
            function(*args)
        else:
            self.send("error", "Invalid command")

    def hello(self):
        self.send("message:hello")

    def ls(self):
        filenames = [filename for filename in listdir('.') if isfile(join('.', filename))]
        self.send("message", " ".join(filenames))

    def get(self, filename):
        filename = join('.', str(filename))
        if not isfile(filename):
            return self.send("error", "no such file")
        with open(filename) as file_handle:
            contents = file_handle.read()
            contents = "{}:{}".format(filename, contents)
            self.send("file", contents)

    def window(self, window_size):
        try:
            window_size = int(window_size)
            self.server.setWindowSize(window_size)
        except ValueError:
            self.send("error", "Invalid window size")

    def terminate(self):
        self.server.terminate()

    def close(self):
        self.conn.close()

    def send(self, message_type, message):
        length = len(message)
        parts = [message_type, length, message]
        message = ":".join([str(part) for part in parts])
        self.conn.send(message)

    def recv(self):
        data = ""
        while 1:
            recvd = self.conn.recv(1024)
            data += recvd
            if "\n" in recvd or len(recvd) is 0:
                break
        data = data.strip()
        return data

class Server(threading.Thread):
    def __init__(self, host, port):
        threading.Thread.__init__(self)
        self.socket = RxPSocket.RxPSocket()
        self.socket.bind(host, listening_port)
        self.socket.listen(5)
        self.signal = True
        print "Server listening on {}:{}".format(host, listening_port)

    def run(self):
        while self.signal:
            conn, addr = self.socket.accept()
            handler = Handler(conn, addr, self)
            handler.handle()
            handler.close()
        self.socket.close()

    def setWindowSize(self, window_size):
        return

    def terminate(self):
        self.signal = False


server = Server(socket.gethostname(), listening_port)
server.daemon = True
server.start()

while server.signal:
    action = raw_input(">> ")
    parts = action.split(" ")
    command, args = parts[0], parts[1:]
    try:
        function = getattr(server, command)
        function(*args)
    except AttributeError:
        print "Invalid command"
    except Exception as e:
        print e
