#!/usr/bin/python
import sys
import re
import threading
from time import sleep
import RxPSocket

argv = sys.argv
if len(argv) < 4:
    print "Invalid invocation. Include listening port number, NetEmu IP, and NetEmu port number"
    sys.exit()

command, listening_port, netemu_ip, netemu_port = argv

try:
    listening_port = int(listening_port)
except ValueError:
    print "Invalid invocation. Listening port number must be an integer"
    sys.exit()

m = re.search('^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$', netemu_ip)
if m is None:
    print "Invalid invocation. Netemu IP must be IPv4 address"
    sys.exit()

try:
    netemu_port = int(netemu_port)
except ValueError:
    print "Invalid invocation. Netemu port number must be an integer"
    sys.exit()

class Server(threading.Thread):
    def __init__(self, host, port):
        threading.Thread.__init__(self)
        self.socket = RxPSocket.RxPSocket()
        self.socket.bind('localhost', listening_port)
        self.socket.listen(5)
        self.signal = True

    def run(self):
        while self.signal:
            conn, addr = self.socket.accept()
            print "connected to {}".format(addr)
        self.socket.close()

    def setWindowSize(self, window_size):
        return

server = Server('localhost', listening_port)
server.daemon = True
server.start()

while 1:
    action = raw_input(">> ")
    parts = action.split(" ")
    if parts[0] == "window":
        try:
            window_size = int(parts[1])
            server.setWindowSize(window_size)
        except ValueError:
            print "Invalid window size"

    if action == "terminate" or action == "exit":
        server.signal = False
        break
